buildscript {
  ext.kotlin_version = '1.7.10'
  ext.ktor_version = '2.1.0'

  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

apply plugin: 'java'
apply plugin: 'kotlin'

java {
  disableAutoTargetJvm()
}

group 'ktor-and-kodein-di'
version '1.0.0'

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
  testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
  testImplementation "junit:junit:4.12"

  implementation "io.ktor:ktor-server-netty:$ktor_version"
  // each plugin is its own dependency, used to be built into ktor in earlier versions of the library
  // each plugin matches the name in code
  implementation "io.ktor:ktor-serialization-jackson:$ktor_version"
  implementation "io.ktor:ktor-server-default-headers:$ktor_version"
  implementation "io.ktor:ktor-server-call-logging:$ktor_version"
  implementation "io.ktor:ktor-server-content-negotiation:$ktor_version"

  // websockets
  implementation "io.ktor:ktor-server-websockets:$ktor_version"

  implementation group: 'org.kodein.di', name: 'kodein-di-generic-jvm', version: '6.5.1'
  implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
  implementation group: 'com.datastax.oss', name: 'java-driver-core', version: '4.14.1'
  // Create a Flux and turn it into a Flow
  // Not _required_ unless we go down the Flux route, possible to do using SharedFlow
//  implementation group: 'io.projectreactor', name: 'reactor-core', version: '3.4.21'
//  implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-reactor', version: '1.6.4'//, ext: 'pom'

}

jar {
  manifest {
    attributes 'Main-Class': 'dev.lankydan.ktor.ApplicationKt'
  }
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

task runApp(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'dev.lankydan.ktor.ApplicationKt'
}